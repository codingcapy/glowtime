/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ResetRouteImport } from './routes/reset'
import { Route as MainRouteImport } from './routes/main'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as HeaderRouteImport } from './routes/_header'
import { Route as IndexRouteImport } from './routes/index'
import { Route as HeaderSignupRouteImport } from './routes/_header.signup'
import { Route as HeaderLoginRouteImport } from './routes/_header.login'
import { Route as HeaderContactRouteImport } from './routes/_header.contact'
import { Route as HeaderAboutRouteImport } from './routes/_header.about'

const ResetRoute = ResetRouteImport.update({
  id: '/reset',
  path: '/reset',
  getParentRoute: () => rootRouteImport,
} as any)
const MainRoute = MainRouteImport.update({
  id: '/main',
  path: '/main',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const HeaderRoute = HeaderRouteImport.update({
  id: '/_header',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const HeaderSignupRoute = HeaderSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => HeaderRoute,
} as any)
const HeaderLoginRoute = HeaderLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => HeaderRoute,
} as any)
const HeaderContactRoute = HeaderContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => HeaderRoute,
} as any)
const HeaderAboutRoute = HeaderAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => HeaderRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/main': typeof MainRoute
  '/reset': typeof ResetRoute
  '/about': typeof HeaderAboutRoute
  '/contact': typeof HeaderContactRoute
  '/login': typeof HeaderLoginRoute
  '/signup': typeof HeaderSignupRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/main': typeof MainRoute
  '/reset': typeof ResetRoute
  '/about': typeof HeaderAboutRoute
  '/contact': typeof HeaderContactRoute
  '/login': typeof HeaderLoginRoute
  '/signup': typeof HeaderSignupRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_header': typeof HeaderRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/main': typeof MainRoute
  '/reset': typeof ResetRoute
  '/_header/about': typeof HeaderAboutRoute
  '/_header/contact': typeof HeaderContactRoute
  '/_header/login': typeof HeaderLoginRoute
  '/_header/signup': typeof HeaderSignupRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/main'
    | '/reset'
    | '/about'
    | '/contact'
    | '/login'
    | '/signup'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/main'
    | '/reset'
    | '/about'
    | '/contact'
    | '/login'
    | '/signup'
  id:
    | '__root__'
    | '/'
    | '/_header'
    | '/dashboard'
    | '/main'
    | '/reset'
    | '/_header/about'
    | '/_header/contact'
    | '/_header/login'
    | '/_header/signup'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HeaderRoute: typeof HeaderRouteWithChildren
  DashboardRoute: typeof DashboardRoute
  MainRoute: typeof MainRoute
  ResetRoute: typeof ResetRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/reset': {
      id: '/reset'
      path: '/reset'
      fullPath: '/reset'
      preLoaderRoute: typeof ResetRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/main': {
      id: '/main'
      path: '/main'
      fullPath: '/main'
      preLoaderRoute: typeof MainRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_header': {
      id: '/_header'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof HeaderRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_header/signup': {
      id: '/_header/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof HeaderSignupRouteImport
      parentRoute: typeof HeaderRoute
    }
    '/_header/login': {
      id: '/_header/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof HeaderLoginRouteImport
      parentRoute: typeof HeaderRoute
    }
    '/_header/contact': {
      id: '/_header/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof HeaderContactRouteImport
      parentRoute: typeof HeaderRoute
    }
    '/_header/about': {
      id: '/_header/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof HeaderAboutRouteImport
      parentRoute: typeof HeaderRoute
    }
  }
}

interface HeaderRouteChildren {
  HeaderAboutRoute: typeof HeaderAboutRoute
  HeaderContactRoute: typeof HeaderContactRoute
  HeaderLoginRoute: typeof HeaderLoginRoute
  HeaderSignupRoute: typeof HeaderSignupRoute
}

const HeaderRouteChildren: HeaderRouteChildren = {
  HeaderAboutRoute: HeaderAboutRoute,
  HeaderContactRoute: HeaderContactRoute,
  HeaderLoginRoute: HeaderLoginRoute,
  HeaderSignupRoute: HeaderSignupRoute,
}

const HeaderRouteWithChildren =
  HeaderRoute._addFileChildren(HeaderRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HeaderRoute: HeaderRouteWithChildren,
  DashboardRoute: DashboardRoute,
  MainRoute: MainRoute,
  ResetRoute: ResetRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
